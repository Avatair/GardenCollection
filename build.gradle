
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'

    }
}

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
}

apply plugin: 'forge'

version = "1.7.10-1.5.6"
group= "com.jaquadro.gardenstuff" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "GardenStuff"

minecraft {
    version = "1.7.10-10.13.2.1291"
    assetDir = "../runtime/assets"

    replace '@VERSION@', project.version
}

sourceSets {
    main {
        java {
            srcDirs project.projectDir.getPath() + '/src'
        }
        resources {
            srcDirs project.projectDir.getPath() + '/resources'
        }
    }

    api {
        java {
            srcDirs project.projectDir.getPath() + '/api'
        }
    }
}

dependencies {
    // http://files.minecraftforge.net/CodeChickenLib/
    compile "codechicken:CodeChickenLib:1.7.10-1.1.1.110:dev"

    // http://chickenbones.net/maven
    compile "codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.4.83:dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    //classifier = 'universal'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives deobfJar
}
